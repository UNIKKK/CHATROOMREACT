{"version":3,"sources":["serviceWorker.js","components/Message/Message.js","components/Form/Form.js","components/Nav/Nav.js","components/App/App.js","config.js","components/About/About.js","index.js","images/logo.svg"],"names":["Boolean","window","location","hostname","match","Message","react_default","a","createElement","className","this","props","message","userName","imageUrl","src","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isUser","pseudo","state","user","displayName","list","messageRef","firebase","database","ref","child","listenMessages","fileInput","React","createRef","imgCanvas","nextProps","setState","event","target","value","newItem","push","_this2","console","log","current","files","name","file","img","Image","URL","createObjectURL","onload","canvas","getContext","drawImage","width","height","toBlob","blob","storage","put","then","snapshot","getDownloadURL","downloadURL","key","handleSend","_this3","limitToLast","on","values","val","_this4","map","item","index","Message_Message_Message","type","placeholder","onChange","handleChange","bind","onKeyPress","handleKeyPress","onClick","handleImage","Nav","Link","to","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","auth","currentUser","onAuthStateChanged","googleAuthProvider","GoogleAuthProvider","addScope","signInWithPopup","signOut","logo","alt","components_Nav_Nav","handleLogOut","handleSignIn","Form_Form_Form","About","Main","Switch","Route","exact","path","component","Index","ReactDOM","render","BrowserRouter","src_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"kKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mJChBeC,sMAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBACXC,KAAKC,MAAMC,QAAQC,SADxB,KAGKH,KAAKC,MAAMC,QAAQA,QACnBF,KAAKC,MAAMC,QAAQE,SAAWR,EAAAC,EAAAC,cAAA,OAAKO,IAAKL,KAAKC,MAAMC,QAAQE,WAAe,YAT1DE,8BCIhBC,cAEjB,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMC,KAyFVa,OAAS,SAACC,GAAD,OAAYA,IAAWP,EAAKQ,MAAMC,KAAKC,aAxF5CV,EAAKQ,MAAQ,CACTb,SAAU,KACVD,QAAS,GACTiB,KAAM,GACNf,SAAU,IAEdI,EAAKY,WAAaC,IAASC,WAAWC,MAAMC,MAAM,YAClDhB,EAAKiB,iBAILjB,EAAKkB,UAAYC,IAAMC,YACvBpB,EAAKqB,UAAYF,IAAMC,YAdRpB,yFAqBOsB,GAClBA,EAAU3B,UACVH,KAAK+B,SAAS,CAAC5B,SAAU2B,EAAU3B,SAASe,mDAGvCc,GACThC,KAAK+B,SAAS,CAAC7B,QAAS8B,EAAMC,OAAOC,6CAGrC,GAAIlC,KAAKgB,MAAMd,QAAS,CACpB,IAAIiC,EAAU,CACVhC,SAAUH,KAAKgB,MAAMb,SACrBD,QAASF,KAAKgB,MAAMd,QACpBE,SAAUJ,KAAKgB,MAAMZ,UAEzBJ,KAAKoB,WAAWgB,KAAKD,GACrBnC,KAAK+B,SAAS,CAAE7B,QAAS,4CAGnB,IAAAmC,EAAArC,KAKV,GAHAsC,QAAQC,IAAI,QAAMvC,KAAK0B,UAAUc,QAAQC,MAAM,GAAGC,MAClDJ,QAAQC,IAAI,QAAMvC,KAAK0B,WAEnB1B,KAAK0B,UAAUc,QAAQC,MAAM,GAAI,CACjC,IAAME,EAAO3C,KAAK0B,UAAUc,QAAQC,MAAM,GAGtCG,EAAM,IAAIC,MACdD,EAAIvC,IAAMyC,IAAIC,gBAAgBJ,GAC9BL,QAAQC,IAAI,cAAeK,EAAIvC,KAC/BiC,QAAQC,IAAI,gBAAiBvC,KAAK6B,WAClCe,EAAII,OAAS,WACTV,QAAQC,IAAI,gBACZ,IAAIU,EAASZ,EAAKR,UACRQ,EAAKR,UAAUW,QAAQU,WAAW,MACxCC,UAAUP,EAAK,EAAG,EAAGA,EAAIQ,MAAOR,EAAIS,OAAQ,EAAG,EAAG,IAAK,KAC3Df,QAAQC,IAAI,OAAQU,GACpBA,EAAOT,QAAQc,OAAO,SAAAC,GAGlBlC,IAASmC,UAAUjC,IAAI,WAAWC,MAAMmB,EAAKD,MACxCe,IAAIF,GACJG,KAAK,SAAAC,GACFA,EAASpC,IAAIqC,iBACRF,KAAK,SAAAG,GACFxB,EAAKN,SAAS,CAAE3B,SAAUyD,SAI3C,aAAc,6CAKd7B,GACO,UAAdA,EAAM8B,KACV9D,KAAK+D,sDAEQ,IAAAC,EAAAhE,KACbA,KAAKoB,WACA6C,YAAY,IACZC,GAAG,QAAS,SAAAhE,GACT8D,EAAKjC,SAAS,CACVZ,KAAMV,OAAO0D,OAAOjE,EAAQkE,4CAOnC,IAAAC,EAAArE,KACL,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVC,KAAKgB,MAAMG,KAAKmD,IAAI,SAACC,EAAMC,GAAP,OACjB5E,EAAAC,EAAAC,cAAC2E,EAAD,CAASX,IAAKU,EAAOtE,QAASqE,EAAMzD,OAAQuD,EAAKvD,YAIzDlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,cACV2E,KAAK,OACLC,YAAY,sBACZzC,MAAOlC,KAAKgB,MAAMd,QAClB0E,SAAU5E,KAAK6E,aAAaC,KAAK9E,MACjC+E,WAAY/E,KAAKgF,eAAeF,KAAK9E,QAEzCJ,EAAAC,EAAAC,cAAA,UACIC,UAAU,eACVkF,QAASjF,KAAK+D,WAAWe,KAAK9E,OAFlC,YAOJJ,EAAAC,EAAAC,cAAA,UAAQyB,IAAKvB,KAAK6B,YAClBjC,EAAAC,EAAAC,cAAA,SAAO4E,KAAK,OAAOnD,IAAKvB,KAAK0B,UAAWkD,SAAU5E,KAAKkF,YAAYJ,KAAK9E,gBAxHtDM,sBCQnB6E,UAVH,WACR,OACIvF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAcH,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAMC,GAAI,KAAV,UAChCzF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeH,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAMC,GAAI,UAAV,aCA7ChE,IAASiE,cCRM,CACXC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,qBD6ERC,cAxEb,SAAAA,EAAY5F,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAA6F,IACjBrF,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAoF,GAAAhF,KAAAb,KAAMC,KACDe,MAAQ,CACXb,SAAU,MAHKK,mFAOC,IAAA6B,EAAArC,KAEfqB,IAASyE,OAAOC,aACjB/F,KAAK+B,SAAS,CAAEd,KAAOI,IAASyE,OAAOC,cAGvC1E,IAASyE,OAAOE,mBAAmB,SAAA/E,GACjCqB,QAAQC,IAAItB,GACZoB,EAAKN,SAAS,CAAEd,KAAOA,6CAK3B,IAAIgF,EAAqB,IAAI5E,IAASyE,KAAKI,mBAC3CD,EAAmBE,SAAS,8CAE5B9E,IAASyE,OAAOM,gBAAgBH,0CAKhC5E,IAASyE,OAAOO,2CAIhB,OACEzG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKO,IAAKiG,IAAMvG,UAAU,YAAYwG,IAAI,SAC1C3G,EAAAC,EAAAC,cAAA,uGAIAF,EAAAC,EAAAC,cAAC0G,EAAD,MACExG,KAAKgB,MAAMC,KAQTrB,EAAAC,EAAAC,cAAA,UACEC,UAAU,cACVkF,QAASjF,KAAKyG,aAAa3B,KAAK9E,OAFlC,kBAPFJ,EAAAC,EAAAC,cAAA,UACEC,UAAU,cACVkF,QAASjF,KAAK0G,aAAa5B,KAAK9E,OAFlC,iBAiBHA,KAAKgB,MAAMC,KACVrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC6G,EAAD,CAAMxG,SAAUH,KAAKgB,MAAMC,QAG7B,6DAjEQX,aEHGsG,mLAEb,OACIhH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKO,IAAKiG,IAAMvG,UAAU,YAAYwG,IAAI,SAC1C3G,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAC0G,EAAD,QAIR5G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wEAbeQ,aCI7BuG,EAAO,WACT,OACIjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,KACIlH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWC,IACnCvH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,SAAUC,UAAWN,MAepDQ,IAASC,OACLzH,EAAAC,EAAAC,cAACwH,EAAA,EAAD,KACI1H,EAAAC,EAAAC,cAZK,WACT,OACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyH,EAAD,QASJ,OAGJC,SAASC,eAAe,SP8FtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,KAAK,SAAAmE,GACjCA,EAAaC,mCQnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.830027d1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './Message.css';\nexport default class Message extends Component {\n    render() {\n        return (\n            <div className=\"message\">\n                <div className=\"message\">\n                <span className=\"message__author\">\n                    {this.props.message.userName}:\n                </span>\n                    {this.props.message.message}\n                    {this.props.message.imageUrl ? <img src={this.props.message.imageUrl} /> : ''}\n                </div>\n      </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport './Form.css';\nimport Message from '../Message/Message';\nimport firebase from 'firebase';\n\n\nexport default class Form extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: null,\n            message: '',\n            list: [],\n            imageUrl: '',\n        };\n        this.messageRef = firebase.database().ref().child('messages');\n        this.listenMessages();\n\n\n        // Create the ref\n        this.fileInput = React.createRef();\n        this.imgCanvas = React.createRef();\n\n    }\n\n\n\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.userName) {\n            this.setState({userName: nextProps.userName.displayName});\n        }\n    }\n    handleChange(event) {\n        this.setState({message: event.target.value});\n    }\n    handleSend() {\n        if (this.state.message) {\n            var newItem = {\n                userName: this.state.userName,\n                message: this.state.message,\n                imageUrl: this.state.imageUrl,\n            }\n            this.messageRef.push(newItem);\n            this.setState({ message: '' });\n        }\n    }\n    handleImage() {\n\n        console.log(\"là\", this.fileInput.current.files[0].name)\n        console.log(\"là\", this.fileInput)\n\n        if (this.fileInput.current.files[0]) {\n            const file = this.fileInput.current.files[0];\n            //const reader = new FileReader();\n            // TODO : check si c'est une image\n            let img = new Image;\n            img.src = URL.createObjectURL(file);\n            console.log('img.src == ', img.src)\n            console.log('refcanvas == ', this.imgCanvas)\n            img.onload = () => {\n                console.log('img onooaded')\n                let canvas = this.imgCanvas\n                let ctx = this.imgCanvas.current.getContext('2d');\n                ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, 100, 100)\n                console.log('pouf', canvas)\n                canvas.current.toBlob(blob => {\n\n                    // inject into storage then send msg\n                    firebase.storage().ref('images/').child(file.name)\n                        .put(blob)\n                        .then(snapshot => {\n                            snapshot.ref.getDownloadURL()\n                                .then(downloadURL => {\n                                    this.setState({ imageUrl: downloadURL });\n                                });\n                        })\n\n                }, 'image/webp', 0.8)\n\n            };\n        }\n    }\n    handleKeyPress(event) {\n        if (event.key !== 'Enter') return;\n        this.handleSend();\n    }\n    listenMessages() {\n        this.messageRef\n            .limitToLast(10)\n            .on('value', message => {\n                this.setState({\n                    list: Object.values(message.val()),\n                });\n            });\n    }\n\n    isUser = (pseudo) => pseudo === this.state.user.displayName;\n\n    render() {\n        return (\n            <div className=\"form\">\n                <div className=\"form__message\">\n                    {this.state.list.map((item, index) =>\n                        <Message key={index} message={item} isUser={this.isUser} />\n                    )}\n                </div>\n\n                <div className=\"form__row\">\n                    <input\n                        className=\"form__input\"\n                        type=\"text\"\n                        placeholder=\"Taper votre message\"\n                        value={this.state.message}\n                        onChange={this.handleChange.bind(this)}\n                        onKeyPress={this.handleKeyPress.bind(this)}\n                    />\n                    <button\n                        className=\"form__button\"\n                        onClick={this.handleSend.bind(this)}\n                    >\n                        Envoyer\n          </button>\n                </div>\n                <canvas ref={this.imgCanvas}></canvas>\n                <input type=\"file\" ref={this.fileInput} onChange={this.handleImage.bind(this)}></input>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Nav.css';\n\nconst Nav = () => {\n    return (\n        <div>\n            <button className=\"app__button\"><Link to={\"/\"}>Index</Link></button>\n            <button className=\"app__button\" ><Link to={\"/about\"}>About</Link>\n            </button>\n        </div>\n    )\n};\n\nexport default Nav","import React, { Component } from 'react';\nimport logo from '../../images/logo.svg';\nimport './App.css';\nimport Form from '../Form/Form.js';\nimport firebase from 'firebase';\nimport firebaseConfig from '../../config';\nimport Nav from '../Nav/Nav';\n\nfirebase.initializeApp(firebaseConfig);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: null,\n    }\n  }\n\n  componentDidMount() {\n\n    if(firebase.auth().currentUser) {\n      this.setState({ user : firebase.auth().currentUser });\n    }\n\n      firebase.auth().onAuthStateChanged(user => {\n        console.log(user)\n        this.setState({ user : user });\n      });\n  }\n\n  handleSignIn() {\n    let googleAuthProvider = new firebase.auth.GoogleAuthProvider()\n    googleAuthProvider.addScope('https://www.googleapis.com/auth/plus.login')\n    //firebase.auth().languageCode = 'fr'\n    firebase.auth().signInWithPopup(googleAuthProvider)\n   /* const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider); */\n  }\n  handleLogOut() {\n    firebase.auth().signOut();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app__header\">\n          <img src={logo} className=\"app__logo\" alt=\"logo\" />\n          <h2>\n            CHATROOM QUI ME FAIT CRISER KLANEFMKDJSN?FSMKLDNF?MOSQDKLJ?FLMQSDK?FMLQSD?FMLQSD?FMLQSDK?\n          </h2>\n\n          <Nav />\n          {!this.state.user ? (\n            <button\n              className=\"app__button\"\n              onClick={this.handleSignIn.bind(this)}\n            >\n              SE CONNECTER\n            </button>\n          ) : (\n              <button\n                className=\"app__button\"\n                onClick={this.handleLogOut.bind(this)}\n              >\n                SE DECONNECTER\n            </button>\n            )}\n        </div>\n\n\n        {this.state.user ?\n          <div className=\"app__list\">\n            <Form userName={this.state.user} />\n          </div>\n          :\n          'Connectez-vous pour accéder à la messagerie.'}\n\n\n\n      </div>\n    );\n  }\n}\nexport default App;","export default {\n    apiKey: \"AIzaSyCZsswUs39ZpZ1BnVw4NqC5cBQPtHWO50E\",\n    authDomain: \"chatroom-react-9651f.firebaseapp.com\",\n    databaseURL: \"https://chatroom-react-9651f.firebaseio.com\",\n    projectId: \"chatroom-react-9651f\",\n    storageBucket: \"chatroom-react-9651f.appspot.com\",\n    messagingSenderId: \"836085032167\"\n  };","import React, { Component } from 'react';\nimport logo from '../../images/logo.svg';\n\nimport Nav from '../Nav/Nav';\n\n\n\nexport default class About extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"app\">\n                    <div className=\"app__header\">\n                        <img src={logo} className=\"app__logo\" alt=\"logo\" />\n                        <h2>About</h2>\n                        <Nav />\n                    </div>\n                </div>\n\n                <div>\n                    <p>Si vous voyez ce message vous êtes connecté </p>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n//Routes\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Index from './components/App/App';\nimport About from './components/About/About';\n\n\n\nconst Main = () => {\n    return (\n        <Switch>\n            <Route exact path={\"/\"} component={Index} />\n            <Route exact path={\"/about\"} component={About} />\n        </Switch>\n    )\n};\n\nconst Home = () => {\n    return (\n        <div>\n            <Main />\n        </div>\n    )\n};\n\n\n\nReactDOM.render((\n    <BrowserRouter>\n        <Home />\n    </BrowserRouter>\n),\n    document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}